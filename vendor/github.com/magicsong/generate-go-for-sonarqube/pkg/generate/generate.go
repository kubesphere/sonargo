package generate

import (
	"errors"
	"fmt"
	"io/ioutil"
	"os"
	"strings"

	. "github.com/dave/jennifer/jen"
	"github.com/magicsong/color-glog"

	"github.com/magicsong/generate-go-for-sonarqube/pkg/api"
	"github.com/magicsong/generate-go-for-sonarqube/pkg/response"
	"github.com/magicsong/generate-go-for-sonarqube/pkg/util/strcase"
)

var (
	DeprecatedWords = []string{"removed", "deprecated", "not_in_cli"}
	validation      *File
	client          *File
	fTestRun        *File
	WorkingDir      string
	PackageName     string
	services        []string
	Endpoint        string
	Username        string
	Password        string
	CurrentRepo     string
)

func init() {
	services = make([]string, 0)
}
func GenerateClient() error {
	client = NewFile(PackageName)
	client.Type().Id("Client").StructFunc(func(g *Group) {
		g.Id("baseURL").Op("*").Qual("net/url", "URL")
		g.List(Id("username"), Id("password"), Id("token")).String()
		g.Id("authType").Id("authType")
		g.Id("httpClient").Op("*").Qual("net/http", "Client")
		for _, service := range services {
			g.Id(strcase.ToCamel(service)).Op("*").Id(strcase.ToCamel(service) + "Service")
		}
	})
	client.Func().Id("NewClient").Params(List(Id("endpoint"), Id("username"), Id("password")).String()).Params(Op("*").Id("Client"), Error()).BlockFunc(func(g *Group) {
		g.Id("c").Op(":=").Op("&Client{username: username, password: password, authType: basicAuth, httpClient: http.DefaultClient}")
		g.If(
			Id("endpoint").Op("==").Lit(""),
		).Block(
			Id("c").Dot("SetBaseURL").Call(Id("defaultBaseURL")),
		).Else().Block(
			If(Err().Op(" := c.SetBaseURL(endpoint); err != nil").Block(
				Return(Nil(), Err()),
			)),
		)
		for _, service := range services {
			g.Id("c").Dot(strcase.ToCamel(service)).Op("=&").Id(strcase.ToCamel(service) + "Service").Values(Dict{Id("client"): Id("c")})
		}
		g.Return(Id("c"), Nil())
	})
	return client.Save(WorkingDir + "/client.go")
}
func prepare(pkgName, workingDir, endpoint, username, password string) error {
	WorkingDir = workingDir
	PackageName = pkgName
	Endpoint = endpoint
	Username = username
	Password = password
	_ = os.Mkdir(workingDir, os.ModeDir)
	_ = os.Mkdir("integration_testing", os.ModeDir)
	_ = os.Mkdir("integration_testing/run", os.ModeDir)
	wd, err := os.Getwd()
	if err != nil {
		glog.Errorln("FAILED to get current working directory")
		return err
	}
	CurrentRepo, err = GetCurrentRepo(workingDir, wd)
	if err != nil {
		glog.Errorln("Failed to get the full package name")
		return err
	}
	//setup validation file
	validation = NewFile(pkgName)
	validation.HeaderComment("[TODO] Code generated by \"github.com/magicsong/generate-go-for-sonarqube\", you should edit some validation logic here")
	validation.ImportName("github.com/magicsong/generate-go-for-sonarqube/pkg/validation", "validation")
	//set up can-be-run test file
	fTestRun = NewFile("main")
	fTestRun.ImportAlias(CurrentRepo, ".")

	fTestRun.Var().Id("client").Op("*").Qual(CurrentRepo, "Client")
	staticCode := `sonarURL := os.Getenv("SONAR_URL")
	if sonarURL == "" {
		fmt.Println("Sonar URL has not been set")
		os.Exit(1)
	}
	c, err := NewClient(sonarURL+"/api", "admin", "admin")
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
	client = c
	`
	fTestRun.Func().Id("init").Call().Block(Op(staticCode))
	fTestRun.Comment("You should MANUALLY add the test func in here ")
	fTestRun.Func().Id("main").Call().Block(Return())
	return nil
}
func Build(pkgName, workingDir, endpoint, username, password string, apidoc *api.API) error {
	err := prepare(pkgName, workingDir, endpoint, username, password)
	if err != nil {
		return err
	}
	// add static file
	err = AddStaticFile()
	if err != nil {
		glog.Errorln("Import static files failed")
		return err
	}
	for _, item := range apidoc.WebServices {
		name := item.Path[4:]
		contin := false
		for _, word := range DeprecatedWords {
			if strings.Contains(strings.ToLower(item.Description), word) {
				glog.V(1).Infof("Detected deprecated api:%s,source:%s\n", item.Path, item.Description)
				contin = true
				break
			}
		}
		if contin {
			continue
		}
		services = append(services, name)
		newFile, err := os.Create(workingDir + "/" + name + "_service.go")
		glog.V(3).Infof("Creaing go file %s", newFile.Name())
		if err != nil {
			return err
		}
		defer newFile.Close()
		f, err := GenerateGoContent(PackageName, &item)
		if err != nil {
			return err
		}
		err = f.Render(newFile)
		if err != nil {
			return err
		}
		err = AddIntegrationFile(&item)
		if err != nil {
			glog.Errorf("Failed to create integration_testing file of service %s", name)
			return err
		}
	}
	if err = GenerateClient(); err != nil {
		glog.Errorln("Failed creating client codes")
		return err
	}
	//write test main
	err = fTestRun.Save("integration_testing/run/main.go")
	if err != nil {
		return err
	}
	//Write validation file
	return validation.Save(WorkingDir + "/validation.go")
}

func AddIntegrationFile(service *api.WebService) error {
	serviceName := strcase.ToCamel(service.Path[4:])
	//set up

	f := NewFile(PackageName + "_test")
	f.ImportAlias("github.com/onsi/ginkgo", ".")
	f.ImportAlias("github.com/onsi/gomega", ".")
	f.ImportAlias(CurrentRepo, ".")
	//construct

	f.Var().Id("_").Op("=").Qual("github.com/onsi/ginkgo", "Describe").Call(Lit("SonarCLI integration test"), Func().Call().BlockFunc(func(g *Group) {
		g.Id("BeforeEach").Call(Func().Call().Block())
		g.Id("JustBeforeEach").Call(Func().Call().Block())
		for _, action := range service.Actions {
			actionName := strcase.ToCamel(action.Key)
			hasOption := true
			hasResp := true
			if !action.HasResponseExample && action.Post {
				hasResp = false
			}
			if len(action.Params) == 0 {
				hasOption = false
			}

			//generate code in test main
			testFuncName := strcase.ToCamel(serviceName + actionName + "Func")
			fTestRun.Commentf("%s testing %s", testFuncName, action.Description)
			fTestRun.Func().Id(testFuncName).Call().BlockFunc(func(g2 *Group) {
				if hasOption {
					g2.Id("opt").Op(":= &").Id(strcase.ToCamel(serviceName + "_" + action.Key + "Option")).Values(DictFunc(func(d Dict) {
						for _, param := range action.Params {
							if detectDeprecatedField(&param) {
								continue
							}
							if param.Required {
								d[Id(strcase.ToCamel(param.Key))] = Lit("MUST_EDIT_IT")
							} else {
								d[Id(strcase.ToCamel(param.Key))] = Lit("")
							}
						}
					}))
					g2.ListFunc(func(g *Group) {
						if hasResp {
							g.Id("v")
						}
						g.Id("resp")
						g.Err()
					}).Op(":=").Id("client").Dot(serviceName).Dot(actionName).Call(Id("opt"))
				} else {
					g2.ListFunc(func(g *Group) {
						if hasResp {
							g.Id("v")
						}
						g.Id("resp")
						g.Err()
					}).Op(":=").Id("client").Dot(serviceName).Dot(actionName).Call()
				}
				g2.If(
					Err().Op("!=").Nil(),
				).Block(
					Qual("fmt", "Println").Call(Err().Dot("Error").Call()),
					Qual("os", "Exit").Call(Id("1")),
				)
				g2.Qual("fmt", "Println").Call(Id("resp").Dot("StatusCode"))
				if hasResp {
					g2.Qual("github.com/davecgh/go-spew/spew", "Dump").Call(Id("v"))
				}
			})
			fTestRun.Line()
			// integration files
			g.Id("Describe").Call(Lit("Test "+actionName+" in "+service.Path), Func().Call().BlockFunc(func(g1 *Group) {
				g1.Id("PIt").Call(Lit("Should be ok"), Func().Call().BlockFunc(func(g2 *Group) {
					if hasOption {
						g2.Id("opt").Op(":= &").Qual(CurrentRepo, strcase.ToCamel(serviceName+"_"+action.Key+"Option")).Values(DictFunc(func(d Dict) {
							for _, param := range action.Params {
								if detectDeprecatedField(&param) {
									continue
								}
								if param.Required {
									d[Id(strcase.ToCamel(param.Key))] = Lit("MUST_EDIT_IT")
								} else {
									d[Id(strcase.ToCamel(param.Key))] = Lit("")
								}
							}
						}))
						g2.ListFunc(func(g *Group) {
							if hasResp {
								g.Id("v")
							}
							g.Id("resp")
							g.Err()
						}).Op(":=").Id("client").Dot(serviceName).Dot(actionName).Call(Id("opt"))
					} else {
						g2.ListFunc(func(g *Group) {
							if hasResp {
								g.Id("v")
							}
							g.Id("resp")
							g.Err()
						}).Op(":=").Id("client").Dot(serviceName).Dot(actionName).Call()
					}
					g2.Id("Expect").Call(Err()).Dot("ShouldNot").Call(Qual("github.com/onsi/gomega", "HaveOccurred").Call())
					g2.Id("Expect").Call(Id("resp").Dot("StatusCode")).Dot("To").Call(Id("Equal").Call(Id("200")))
					if hasResp {
						g2.Id("Expect").Call(Op("*").Id("v")).Dot("To").Call(Id("Equal").Call(Lit("MUST_EDIT_IT")))
					} else {
						g2.Id("Expect").Call(Id("resp").Dot("ContentLength")).Dot("To").Call(Id("Equal").Call(Id("0")))
					}
				}))
			}))
		}
	}))
	return f.Save("integration_testing/" + service.Path[4:] + "_service_test.go")
}
func AddStaticFile() error {
	s1 := fmt.Sprintf("package %s\n\n%s", PackageName, SonarqubeConst)
	s2 := fmt.Sprintf("package %s\n\n%s", PackageName, WebClientConst)
	SuiteStr := strings.Replace(TestSuiteConst, "{REPLACE_PACKAGENAME}", ". \""+CurrentRepo+"\"", 1)
	s3 := fmt.Sprintf("package %s_test\n\n%s", PackageName, SuiteStr)
	err := ioutil.WriteFile(WorkingDir+"/sonarqube.go", []byte(s1), 0644)
	if err != nil {
		return err
	}
	err = ioutil.WriteFile("integration_testing/sonarqube_suite_test.go", []byte(s3), 0644)
	if err != nil {
		return err
	}
	return ioutil.WriteFile(WorkingDir+"/client_util.go", []byte(s2), 0644)
}

func GenerateGoContent(packageName string, service *api.WebService) (f *File, err error) {
	if service == nil {
		return nil, errors.New("service must not be nil")
	}
	if packageName == "" {
		return nil, errors.New("package name is illegal")
	}
	f = NewFile(packageName)

	f.PackageComment(service.Description)
	f.ImportName("github.com/google/glog", "glog")

	name := service.Path[4:]
	//Create Service Struct
	f.Type().Id(strcase.ToCamel(name) + "Service").Struct(
		Id("client").Op("*").Id("Client"),
	).Line()

	//create main object
	fetcher := response.NewExampleFetcher(Endpoint, Username, Password)
	examples, err := fetcher.GetResponseExample(service)
	if err != nil {
		glog.Errorf("cannot fetch examples of <%s>", service.Path)
		return nil, err
	}
	for _, exam := range examples {
		if exam.Format != "json" {
			glog.V(1).Infof("The response of action <%s> for api <%s> is %s, not json", exam.Name, name, exam.Format)
			continue
		}
		if exam.Example != "" {
			respName := strcase.ToCamel(name + "_" + exam.Name + "Object")
			stru, err := ConvertStringToStruct(exam.Example, respName)
			if err != nil {
				glog.Warningf("cannot generate resp struct of <%s>,you should manual edit the file %s,esspecial method response", service.Path, WorkingDir+"/"+name+"_service.go")
				glog.Errorln(err.Error())
				err = nil
				//because of the api is not normative,so we should ignore the error
				f.Commentf("[TODO] cannot generate resp struct of <%s>,you should manual edit the file %s,esspecial method response", service.Path, WorkingDir+"/"+name+"_service.go")
				f.Type().Id(respName).Struct().Line()
			} else {
				f.Id(stru).Line()
				f.Line()
			}
		}
	}
	//Create Methods
	for _, item := range service.Actions {
		f.Add(GenerateServiceActionContent(name, &item))
	}
	return
}
func detectDeprecatedField(field *api.Param) bool {
	if strings.Contains(strings.ToLower(field.Description), "deprecated") {
		return true
	}
	return false
}

//GenerateServiceActionContent generate code of each service,include api method and related structs
func GenerateServiceActionContent(serviceName string, action *api.Action) *Statement {
	c := Line()
	hasOption := true
	optionName := strcase.ToCamel(serviceName + "_" + action.Key + "Option")
	respName := strcase.ToCamel(serviceName + "_" + action.Key + "Object")
	if len(action.Params) == 0 {
		hasOption = false
	}

	if hasOption {
		c.Type().Id(optionName).StructFunc(func(g *Group) {
			for _, field := range action.Params {
				if detectDeprecatedField(&field) {
					glog.V(1).Infof("Detected deprecated field <%s> in <action>:%s,description:%s\n", field.Key, action.Key, field.Description)
					continue
				}
				g.Id(strcase.ToCamel(field.Key)).String().Tag(map[string]string{"url": field.Key + ",omitempty"}).Commentf("Description:\"%s\",ExampleValue:\"%s\"", field.Description, field.ExampleValue)
			}
		}).Line()

		//create valid method
		validation.Func().Params(Id("s").Op("*").Id(strcase.ToCamel(serviceName) + "Service")).Id("Validate" + strcase.ToCamel(action.Key) + "Opt").Params(
			Id("opt").Op("*").Id(optionName)).Params(Error()).Block(
			Return(Nil()),
		)
	}
	//create method
	method := "GET"
	noResp := false
	if action.Post {
		method = "POST"
	}
	c.Commentf("%s %s", strcase.ToCamel(action.Key), action.Description).Line()
	c.Func().Params(Id("s").Op("*").Id(strcase.ToCamel(serviceName) + "Service")).Id(strcase.ToCamel(action.Key)).ParamsFunc(func(g *Group) {
		if hasOption {
			g.Id("opt").Op("*").Id(optionName)
		}
	}).ParamsFunc(func(g *Group) {
		switch action.ResponseType {
		case "json":
			g.Id("v").Op("*").Id(respName)
		case "txt", "log", "svg", "xml":
			g.Id("v").Op("*").String()
			respName = "string"
		default:
			if method == "GET" {
				g.Id("v").Op("*").Id(respName)
			} else {
				noResp = true
			}
		}
		g.Id("resp").Op("*").Qual("net/http", "Response")
		g.Err().Error()
	}).BlockFunc(func(g *Group) {
		if hasOption {
			g.Err().Op("=").Id("s").Dot("Validate" + strcase.ToCamel(action.Key) + "Opt").Call(Id("opt"))
			ErrorHandlerHelper(g)
		}
		g.List(Id("req"), Id("err")).Op(":=").Id("s").Dot("client").Dot("NewRequest").CallFunc(func(g *Group) {
			g.Lit(method)
			g.Lit(serviceName + "/" + action.Key)
			if hasOption {
				g.Id("opt")
			} else {
				g.Nil()
			}
		})
		ErrorHandlerHelper(g)
		if noResp {
			g.List(Id("resp"), Err()).Op("=").Id("s").Dot("client").Dot("Do").Call(Id("req"), Nil())
			ErrorHandlerHelper(g)
		} else {
			g.Id("v").Op("=").New(Id(respName))
			g.List(Id("resp"), Err()).Op("=").Id("s").Dot("client").Dot("Do").Call(Id("req"), Id("v"))
			g.If(
				Err().Op("!=").Nil(),
			).Block(
				Return().List(Nil(), Id("resp"), Err()),
			)
		}
		g.Return()
	})
	return c
}

func ErrorHandlerHelper(g *Group) {
	g.If(
		Err().Op("!=").Nil(),
	).Block(
		Return(),
	)
}

func GetCurrentRepo(workingDir, currentDir string) (string, error) {
	gopath := os.Getenv("GOPATH")
	if gopath == "" {
		return "", errors.New("$GOPATH is not set correctly")
	}
	gosrc := gopath + "/src"
	if currentDir[:len(gosrc)] != gosrc {
		return "", errors.New("current location is not in $GOPATH/src")
	}
	if len(currentDir) == len(gosrc) {
		return "", errors.New("current location should be in subdir of $GOPATH/src")
	}
	return currentDir[len(gosrc)+1:] + "/" + workingDir, nil
}
